{"/home/travis/build/npmtest/node-npmtest-telebot/test.js":"/* istanbul instrument in package npmtest_telebot */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-telebot/lib.npmtest_telebot.js":"/* istanbul instrument in package npmtest_telebot */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_telebot = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_telebot = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-telebot/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-telebot && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_telebot */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_telebot\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_telebot.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_telebot.rollup.js'] =\n            local.assetsDict['/assets.npmtest_telebot.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_telebot.__dirname + '/lib.npmtest_telebot.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-telebot/node_modules/telebot/lib/telebot.js":"'use strict';\n\nconst\n  request = require('request'),\n  webhook = require('./webhook.js'),\n  standardUpdates = require('./updates.js'),\n  standardMethods = require('./methods.js');\n\n/* Telegram Bot */\n\nclass TeleBot {\n\n  constructor(cfg) {\n\n    if (typeof cfg != 'object') cfg = { token: cfg };\n\n    if (!cfg.token || cfg.token.split(':').length != 2) {\n      throw Error('[bot.error] invalid bot token');\n    }\n\n    this.cfg = cfg;\n    this.token = cfg.token;\n    this.id = this.token.split(':')[0];\n    this.api = `https://api.telegram.org/bot${ this.token }`;\n    this.fileLink = `https://api.telegram.org/file/bot${ this.token }/`;\n\n    let poll = cfg.polling;\n\n    // Migration\n    if (!poll) {\n      if (cfg.pooling) {\n        poll = cfg.pooling;\n        console.warn('[bot.warning] use \"polling\" option instead of \"pooling\"!');\n      } else {\n        poll = {};\n        // Set cfg.polling\n        for (let name of ['limit', 'timeout', 'retryTimeout']) {\n          poll[name] = cfg[name];\n        }\n        // cfg.sleep renamed to cfg.polling.interval\n        poll.interval = cfg.sleep;\n      }\n    }\n\n    this.limit = poll.limit > 0 && poll.limit <= 100 ? poll.limit : 100;\n    this.interval = poll.interval >= 0 ? poll.interval : 1000;\n    this.timeout = poll.timeout >= 0 ? poll.timeout : 0;\n    this.retryTimeout = poll.retryTimeout >= 0 ? poll.retryTimeout : 5000;\n\n    this.webhook = cfg.webhook;\n\n    this.updateId = 0;\n    this.loopFn = null;\n\n    this.flags = {\n      poll: false,\n      retry: false,\n      looping: false\n    };\n\n    this.modList = {};\n    this.eventList = {};\n\n    this.updateTypes = standardUpdates;\n\n    this.processUpdate = (update, props) => {\n      for (let name in this.updateTypes) {\n        if (name in update) {\n          update = update[name];\n          return this.updateTypes[name].call(this, update, props);\n        }\n      }\n    };\n\n  }\n\n  /* Modules */\n\n  use(fn) {\n    return fn.call(this, this, this.cfg.modules);\n  }\n\n  /* Connection */\n\n  connect() {\n\n    const f = this.flags;\n\n    // Set webhook\n    if (this.webhook) {\n      let { url, cert } = this.webhook;\n      if (url) url = `${ url }/${ this.token }`;\n      return this.setWebhook(url, cert).then(x => {\n        console.log(`[bot.webhook] set to \"${url}\"`);\n        return webhook.call(this, this, this.webhook);\n      }).catch(error => {\n        console.error('[bot.error.webhook]', error);\n        this.event('error', { error });\n        return;\n      });\n    \n    }\n\n    // Delete webhook\n    this.setWebhook().then(data => {\n      f.poll = true;\n      if (data.description == 'Webhook was deleted')\n        console.log('[bot.webhook] webhook was deleted');\n      console.log('[bot.info] bot started');\n    }).catch(error => {\n      console.error('[bot.error.webhook]', error);\n      this.event('error', { error });\n      return;\n    });\n\n    f.looping = true;\n\n    this.event('connect');\n\n    // Global loop function\n    this.loopFn = setInterval(x => {\n\n      // Stop on false looping flag\n      if (!f.looping) clearInterval(this.loopFn);\n\n      // Skip processing on false poll flag\n      if (!f.poll) return;\n\n      f.poll = false;\n\n      // Get updates\n      this.getUpdates().then(x => {\n\n        // Retry connecting\n        if (f.retry) {\n\n          const now = Date.now();\n          const diff = (now - f.retry) / 1000;\n\n          console.log(`[bot.info.update] reconnected after ${ diff } seconds`);\n          this.event('reconnected', {\n            startTime: f.retry, endTime: now, diffTime: diff\n          });\n\n          f.retry = false;\n\n        }\n\n        // Tick\n        return this.event('tick');\n\n      }).then(x => {\n\n        // Seems okay for the next poll\n        f.poll = true;\n\n      }).catch(error => {\n\n        // Set retry flag as current date (for timeout calculations)\n        if (f.retry === false) f.retry = Date.now();\n\n        console.error(`[bot.error.update]`, error.stack || error);\n        this.event(['error', 'error.update'], { error });\n\n        return Promise.reject();\n\n      }).catch(x => {\n\n        const seconds = this.retryTimeout / 1000;\n        console.log(`[bot.info.update] reconnecting in ${ seconds } seconds...`);\n        this.event('reconnecting');\n\n        // Set reconnecting timeout\n        setTimeout(x => (f.poll = true), this.retryTimeout);\n\n      });\n\n    }, this.interval);\n\n  }\n\n  /* Stop looping */\n\n  disconnect(message) {\n    this.flags.looping = false;\n    console.log(`[bot.info] bot disconnected ${ message ? ': ' + message : '' }`);\n    this.event('disconnect', message);\n  }\n\n  /* Fetch updates */\n\n  getUpdates(offset=this.updateId, limit=this.limit, timeout=this.timeout) {\n\n    // Request updates from Telegram server\n    return this.request('/getUpdates', {\n      offset, limit, timeout\n    }).then(body =>\n      this.receiveUpdates(body.result)\n    );\n  \n  }\n\n  /* Recive updates */\n\n  receiveUpdates(updateList) {\n\n    // Globals\n    var\n      mod,\n      props = {},\n      promise = Promise.resolve();\n\n    // No updates\n    if (!updateList.length) return promise;\n\n    // We have updates\n    return this.event('update', updateList).then(eventProps => {\n\n      // Run update list modifiers\n      mod = this.modRun('updateList', {\n        list: updateList,\n        props: extendProps(props, eventProps)\n      });\n\n      updateList = mod.list;\n      props = mod.props;\n\n      // Every Telegram update\n      for (let update of updateList) {\n\n        // Update ID\n        const nextId = ++update.update_id;\n        if (this.updateId < nextId) this.updateId = nextId;\n\n        // Run update modifiers\n        mod = this.modRun('update', { update, props });\n\n        update = mod.update;\n        props = mod.props;\n\n        // Process update\n        promise = promise.then(x => this.processUpdate(update, props));\n\n      }\n\n      return promise;\n\n    }).catch(error => {\n\n      console.log('[bot.error]', error.stack || error);\n      this.event('error', { error });\n\n      // Don't trigger server reconnect\n      return Promise.resolve();\n\n    });\n\n  }\n\n  /* Send request to server */\n\n  request(url, form, data) {\n    const options = { url: this.api + url, json: true };\n    if (form) {\n      options.form = form;\n    } else {\n      for (let item in data) {\n        const type = typeof data[item];\n        if (type == 'string' || type == 'object') continue;\n        data[item] = JSON.stringify(data[item]);\n      }\n      options.formData = data\n    };\n    return new Promise((resolve, reject) => {\n      request.post(options, (error, response, body) => {\n        if (error || !body.ok || response.statusCode == 404) {\n          return reject(error || body || 404);\n        }\n        return resolve(body);\n      });\n    });\n  }\n\n  /* Modifications */\n\n  mod(names, fn) {\n    if (typeof names == 'string') names = [names];\n    const mods = this.modList;\n    for (let name of names) {\n      if (!mods[name]) mods[name] = [];\n      if (mods[name].includes(fn)) return;\n      mods[name].push(fn);\n    }\n    return fn;\n  }\n\n  modRun(name, data) {\n    const list = this.modList[name];\n    if (!list || !list.length) return data;\n    for (let fn of list) data = fn.call(this, data);\n    return data;\n  }\n\n  removeMod(name, fn) {\n    let list = this.modList[name];\n    if (!list) return false;\n    let index = list.indexOf(fn);\n    if (index == -1) return false;\n    list.splice(index, 1);\n    return true;\n  }\n\n  /* Events */\n\n  on(types, fn, opt) {\n    if (!opt) opt = {};\n    if (typeof types == 'string') types = [types];\n    for (let type of types) {\n      let event = this.eventList[type];\n      if (!event) {\n        this.eventList[type] = { fired: null, list: [fn] };\n      } else {\n        if (event.list.includes(fn)) continue;\n        event.list.push(fn);\n        if (opt.fired && event.fired) {\n          let fired = event.fired;\n          new Promise((resolve, reject) => {\n            let output = fn.call(fired.self, fired.data, fired.self, fired.details);\n            if (output instanceof Promise) output.then(resolve).catch(reject);\n            else resolve(output);\n          }).catch(error => {\n            eventPromiseError.call(this, type, fired, error);\n          });\n          if (opt.cleanFired) this.eventList[type].fired = null;\n        }\n      }\n    }\n  }\n\n  event(types, data, self) {\n    let promises = [];\n    if (typeof types == 'string') types = [types];\n    for (let type of types) {\n      let event = this.eventList[type];\n      let details = { type, time: Date.now() };\n      let fired = { self, data, details };\n      if (!event) {\n        this.eventList[type] = { fired, list: [] };\n        continue;\n      }\n      event.fired = fired;\n      event = event.list;\n      for (let fn of event) {\n        promises.push((new Promise((resolve, reject) => {\n          let that = this;\n          details.remove = (function(fn) {\n            return x => that.removeEvent(type, fn);\n          }(fn));\n          fn = fn.call(self, data, self, details);\n          if (fn instanceof Promise) {\n            fn.then(resolve).catch(reject);\n          } else {\n            resolve(fn);\n          }\n        })).catch(error => {\n          eventPromiseError.call(this, type, fired, error);\n        }));\n      }\n    }\n    return Promise.all(promises);\n  }\n\n  cleanEvent(type) {\n    let events = this.eventList;\n    if (!events.hasOwnProperty(type)) return false;\n    events[type].fired = null;\n    return true;\n  }\n\n  removeEvent(type, fn) {\n    let events = this.eventList;\n    if (!events.hasOwnProperty(type)) return false;\n    let event = events[type].list;\n    let index = event.indexOf(fn);\n    if (index == -1) return false;\n    event.splice(index, 1);\n    return true;\n  }\n\n  destroyEvent(type) {\n    let events = this.eventList;\n    if (!events.hasOwnProperty(type)) return false;\n    delete events[type];\n    return true;\n  }\n\n  /* Process global properties */\n\n  properties(form={}, opt={}) {\n\n    // Reply to message\n    if (opt.reply) form.reply_to_message_id = opt.reply;\n\n    // Markdown/HTML support for message\n    if (opt.parse) form.parse_mode = opt.parse;\n\n    // User notification\n    if (opt.notify === false) form.disable_notification = true;\n\n    // Web preview\n    if (opt.preview === false) form.disable_web_page_preview = true;\n\n    // Markup object\n    if (opt.markup !== undefined) {\n      if (opt.markup == 'hide' || opt.markup === false) {\n        // Hide keyboard\n        form.reply_markup = JSON.stringify({ hide_keyboard: true });\n      } else if (opt.markup == 'reply') {\n        // Fore reply\n        form.reply_markup = JSON.stringify({ force_reply: true });\n      } else {\n        // JSON keyboard\n        form.reply_markup = opt.markup;\n      }\n    }\n\n    return (this.modRun('property', { form, options: opt })).form;\n\n  }\n\n  /* Method adder */\n\n  static addMethods(methods) {\n\n    for (let id in methods) {\n\n      const method = methods[id];\n\n      // If method is a function\n      if (typeof method == 'function') {\n        this.prototype[id] = method;\n        continue;\n      }\n\n      // Set method name\n      const name = method.short || id;\n\n      // Argument function\n      let argFn = method.arguments;\n      if (argFn && typeof argFn != 'function') {\n        if (typeof argFn == 'string') argFn = [argFn];\n        let args = argFn;\n        argFn = function() {\n          const form = {};\n          args.forEach((v, i) => form[v] = arguments[i]);\n          return form;\n        };\n      }\n\n      // Options function\n      let optFn = method.options;\n\n      // Create method\n      this.prototype[name] = function() {\n        this.event(name, arguments);\n        let form = {}, args = [].slice.call(arguments);\n        let options = args[args.length - 1];\n        if (typeof options != 'object') options = {};\n        if (argFn) form = argFn.apply(this, args);\n        if (optFn) options = optFn.apply(this, [].concat(form, options));\n        form = this.properties(form, options);\n        let request = this.request(`/${id}`, form);\n        if (method.then) request = request.then(method.then);\n        return request;\n      };\n\n    }\n  }\n};\n\n/* Add standard methods */\n\nTeleBot.addMethods(standardMethods);\n\n/* Functions */\n\nfunction eventPromiseError(type, fired, error) {\n  return new Promise((resolve, reject) => {\n    console.error('[bot.error.event]', error.stack || error);\n    if (type != 'error' && type != 'error.event') {\n      this.event(['error', 'error.event'], { error, data: fired.data })\n        .then(resolve).catch(reject);\n    } else {\n      resolve();\n    }\n  });\n}\n\nfunction extendProps(props, input) {\n  for (let obj of input) {\n    for (let naprops in obj) {\n      const key = props[naprops], value = obj[naprops];\n      if (key !== undefined) {\n        if (!Array.isArray(key)) props[naprops] = [key];\n        props[naprops].push(value);\n        continue;\n      }\n      props[naprops] = value;\n    }\n  }\n  return props;\n}\n\n/* Exports */\n\nmodule.exports = TeleBot;\n","/home/travis/build/npmtest/node-npmtest-telebot/node_modules/telebot/lib/webhook.js":"'use strict';\n\nconst\n  fs = require('fs'),\n  url = require('url'),\n  http = require('http'),\n  https = require('https');\n\nmodule.exports = (bot, opt) => {\n\n  const token = '/' + bot.token;\n\n  let\n    host = opt.host || '0.0.0.0',\n    port = opt.port || 443,\n    key = opt.key && fs.readFileSync(opt.key),\n    cert = opt.cert && fs.readFileSync(opt.cert);\n\n  // Create server\n  const server = key && cert ?\n    https.createServer({ key, cert }, listener) :\n      http.createServer(listener);\n\n  // Start server\n  server.listen(port, host, x => {\n    console.log(`[bot.webhook] started${ key ? ' secure' : ''} server on \"${ host }:${ port }\"`);\n  });\n\n  // Request listener\n  function listener(req, res) {\n    if (req.url == token && req.method == 'POST') {\n      var json = '';\n      req.on('data', data => json += data);\n      req.on('end', x => {\n        res.end();\n        bot.receiveUpdates([JSON.parse(json)], true);\n      });\n    }\n  }\n\n};\n","/home/travis/build/npmtest/node-npmtest-telebot/node_modules/telebot/lib/updates.js":"'use strict';\n\n// Command regexp\nconst reCMD = /^\\/([0-9а-я\\w\\d\\_\\-]+)/;\n\n// Message types\nconst MESSAGE_TYPES = [\n  'edit_date',\n  'text', 'audio', 'voice', 'document', 'photo',\n  'sticker', 'video', 'contact', 'location', 'venue',\n  'new_chat_member', 'left_chat_member', 'new_chat_title',\n  'new_chat_photo', 'delete_chat_photo', 'group_chat_created',\n  'supergroup_chat_created', 'channel_chat_created', 'migrate_to_chat_id',\n  'migrate_from_chat_id', 'pinned_message'\n];\n\nconst SHORTCUTS = {\n  edit_date: 'edited',\n  new_chat_member: 'userJoined',\n  left_chat_member: 'userLeft',\n  new_chat_title: 'newTitle',\n  new_chat_photo: 'newPhoto',\n  delete_chat_photo: 'deletePhoto',\n  pinned_message: 'pinnedMessage',\n  group_chat_created: 'groupCreated',\n  channel_chat_created: 'channelCreated',\n  supergroup_chat_created: 'supergroupCreated',\n  migrate_to_chat_id: 'migrateTo',\n  migrate_from_chat_id: 'migrateFrom'\n};\n\n// Update type functions\nconst updateFunctions = {\n\n  // Message\n  message(update, props) {\n\n    // Set promise\n    let promise = Promise.resolve();\n\n    // Run global message mod\n    let mod = this.modRun('message', { msg: update, props });\n\n    update = mod.msg;\n    props = mod.props;\n\n    for (let type of MESSAGE_TYPES) {\n\n      // Check for Telegram API documented types\n      if (!(type in update)) continue;\n\n      // Shortcut\n      if (SHORTCUTS[type]) type = SHORTCUTS[type];\n      \n      // Set message type\n      props.type = type;\n\n      // Run message type mod\n      mod = this.modRun(type, { msg: update, props });\n\n      update = mod.msg;\n      props = mod.props;\n\n      // Send type event\n      promise = this.event(['*', type], update, props);\n\n      // Check for command\n      if (type == 'text') {\n\n        const match = reCMD.exec(update.text);\n        if (!match) continue;\n\n        // Command found\n        props.type = 'command';\n        promise = promise.then(x => {\n          return this.event(['/*', '/' + match[1]], update, props);\n        });\n\n      }\n\n      return promise;\n\n    }\n  },\n\n  // Edited message\n  edited_message(update, props) {\n    return updateFunctions.message.call(this, update, props);\n  },\n\n  // Inline query\n  inline_query(update, props) {\n    props.type = 'inlineQuery';\n    return this.event('inlineQuery', update, props);\n  },\n\n  // Inline choice\n  chosen_inline_result(update, props) {\n    props.type = 'inlineChoice';\n    return this.event('inlineChoice', update, props);\n  },\n\n  // Callback query\n  callback_query(update, props) {\n    props.type = 'callbackQuery';\n    return this.event('callbackQuery', update, props);\n  }\n\n};\n\nmodule.exports = updateFunctions;\n","/home/travis/build/npmtest/node-npmtest-telebot/node_modules/telebot/lib/methods.js":"'use strict';\n\nconst\n  fs = require('fs'),\n  nurl = require('url'),\n  path = require('path'),\n  stream = require('stream'),\n  request = require('request');\n\nconst ANSWER_METHODS = {\n  addArticle: 'article', addPhoto: 'photo', addVideo: 'video',\n  addGif: 'gif', addVideoGif: 'mpeg4_gif', addSticker: 'sticker',\n  addVoice: 'voice', addDocument: 'document', addLocation: 'location',\n  addVenue: 'venue',\n  // Cached methods\n  cachedPhoto: 'photo', cachedGif: 'gif', cachedVideoGif: 'mpeg4_gif',\n  cachedSticker: 'sticker', cachedDocument: 'document', cachedVideo: 'video',\n  cachedVoice: 'voice', cachedAudio: 'audio'\n};\n\nconst DEFAULT_FILE_EXTS = {\n  photo: 'jpg', audio: 'mp3', 'document': 'doc',\n  sticker: 'webp', voice: 'm4a', 'video': 'mp4'\n};\n\nconst reURL = /^https?\\:\\/\\/|www\\./;\n\n// Methods\nconst methods = {\n\n  keyboard(keyboard, opt={}) {\n    const markup = { keyboard };\n    if (opt.resize === true) markup['resize_keyboard'] = true;\n    if (opt.once === true) markup['one_time_keyboard'] = true;\n    if (opt.selective) markup['selective'] = opt.selective;\n    return JSON.stringify(markup);\n  },\n  \n  button(type, text) {\n    if (!text && type) return { text: type };\n    type = `request_${type}`;\n    return { text, [type]: true };\n  },\n  \n  inlineKeyboard(inline_keyboard) {\n    return JSON.stringify({ inline_keyboard });\n  },\n\n  inlineQueryKeyboard(inline_keyboard) {\n    return {inline_keyboard: inline_keyboard};\n  },\n  \n  inlineButton(text, opt={}) {\n    const markup = { text };\n    if (opt.url) markup.url = opt.url;\n    if (opt.inline || opt.inline === '') markup.switch_inline_query = opt.inline;\n    if (opt.callback) markup.callback_data = String(opt.callback);\n    return markup;\n  },\n  \n  answerList(id, opt) {\n    return new AnswerList(id, opt);\n  },\n  \n  getMe: {\n    then: data => data.result\n  },\n  \n  sendMessage: {\n    arguments: ['chat_id', 'text']\n  },\n  \n  forwardMessage: {\n    arguments: ['chat_id', 'from_chat_id', 'message_id']\n  },\n  \n  sendPhoto(id, photo, opt) {\n    return sendFile.call(this, 'photo', id, photo, opt);\n  },\n  \n  sendAudio(id, audio, opt) {\n    return sendFile.call(this, 'audio', id, audio, opt);\n  },\n  \n  sendDocument(id, doc, opt) {\n    return sendFile.call(this, 'document', id, doc, opt);\n  },\n  \n  sendSticker(id, sticker, opt) {\n    return sendFile.call(this, 'sticker', id, sticker, opt);\n  },\n  \n  sendVideo(id, video, opt) {\n    return sendFile.call(this, 'video', id, video, opt);\n  },\n  \n  sendVoice(id, voice, opt) {\n    return sendFile.call(this, 'voice', id, voice, opt);\n  },\n  \n  sendLocation: {\n    arguments: (chat_id, position) => {\n      return {\n        chat_id, latitude: position[0], longitude: position[1]\n      };\n    }\n  },\n  \n  sendVenue: {\n    arguments: (chat_id, position, title, address) => {\n      return {\n        chat_id, latitude: position[0], longitude: position[1], title, address\n      }\n    },\n    options: (form, opt) => {\n      if (opt.foursquare) form.foursquare_id = opt.foursquare;\n      return form;\n    }\n  },\n  \n  sendContact: {\n    arguments: ['chat_id', 'phone_number', 'first_name', 'last_name']\n  },\n  \n  sendChatAction: {\n    short: 'sendAction',\n    arguments: ['chat_id', 'action']\n  },\n  \n  getUserProfilePhotos: {\n    short: 'getUserPhoto',\n    arguments: 'chat_id',\n    options: (form, opt) => {\n      if (opt.offset) form.offset = opt.offset;\n      if (opt.limit) form.limit = opt.limit;\n      return form;\n    }\n  },\n\n  getFile: {\n    arguments: 'file_id',\n    then: file => {\n      const result = file.result;\n      result.fileLink = this.fileLink + result.file_path;\n      return result;\n    }\n  },\n\n  getChat: {\n    arguments: ['chat_id']\n  },\n\n  leaveChat: {\n    arguments: ['chat_id']\n  },\n\n  getChatAdministrators: {\n    short: 'getAdmins',\n    arguments: ['chat_id']\n  },\n\n  getChatMember: {\n    short: 'getMember',\n    arguments: ['chat_id', 'user_id']\n  },\n\n  getChatMembersCount: {\n    short: 'countMembers',\n    arguments: ['chat_id']\n  },\n\n  kickChatMember: {\n    short: 'kick',\n    arguments: ['chat_id', 'user_id']\n  },\n  \n  unbanChatMember: {\n    short: 'unban',\n    arguments: ['chat_id', 'user_id']\n  },\n\n  answerInlineQuery: {\n    short: 'answerQuery',\n    arguments: answers => {\n      return {\n        inline_query_id: answers.id,\n        results: answers.results(),\n        next_offset: answers.nextOffset,\n        is_personal: answers.personal,\n        cache_time: answers.cacheTime\n      };\n    }\n  },\n\n  answerCallbackQuery: {\n    short: 'answerCallback',\n    arguments: ['callback_query_id', 'text', 'show_alert']\n  },\n  \n  editMessageText: {\n    short: 'editText',\n    arguments: (obj, text) => editObject(obj, { text })\n  },\n  \n  editMessageCaption: {\n    short: 'editCaption',\n    arguments: (obj, caption) => editObject(obj, { caption })\n  },\n  \n  editMessageReplyMarkup: {\n    short: 'editMarkup',\n    arguments: (obj, reply_markup) => editObject(obj, { reply_markup })\n  },\n  \n  setWebhook(url, certificate) {\n    if (certificate) {\n      const form = {\n        url,\n        certificate: {\n          value: fs.readFileSync(certificate),\n          options: { filename: 'cert.pem' }\n        }\n      };\n      return this.request('/setWebhook', null, form);\n    }\n    return this.request('/setWebhook', { url });\n  },\n\n  getWebhookInfo: {\n    then: data => data.result\n  }\n\n};\n\n// Functions\n\nfunction editObject(obj, form) {\n  if (obj.chatId && obj.messageId) {\n    form.chat_id = obj.chatId;\n    form.message_id = obj.messageId;\n  } else if (obj.inlineMsgId) {\n    form.inline_message_id = obj.inlineMsgId;\n  }\n  return form;\n}\n\nfunction sendFile(type, chat_id, file, opt={}) {\n\n  const form = this.properties({ chat_id }, opt);\n  const defName = `file.${ DEFAULT_FILE_EXTS[type] }`;\n\n  const url = 'send' + type.charAt(0).toUpperCase() + type.slice(1);\n\n  // Send bot action event\n  this.event(url, [].slice.call(arguments).splice(0, 1));\n\n  // Set file caption\n  if (opt.caption) form.caption = opt.caption;\n\n  if (file instanceof stream.Stream) {\n    // File stream object\n    if (!opt.fileName)\n      opt.fileName = nurl.parse(path.basename(file.path)).pathname;\n    form[type] = {\n      value: file,\n      options: { filename: opt.fileName }\n    };\n  } else if (Buffer.isBuffer(file)) {\n    // File buffer\n    if (!opt.fileName) opt.fileName = defName;\n    form[type] = {\n      value: file,\n      options: { filename: opt.fileName }\n    };\n  } else if (reURL.test(file)) {\n    // File url\n    if (!opt.fileName)\n      opt.fileName = path.basename(nurl.parse(file).pathname) || defName;\n    form[type] = {\n      value: request.get(file),\n      options: { filename: opt.fileName }\n    };  \n  } else if (fs.existsSync(file)) {\n    // File location\n    if (!opt.fileName) opt.fileName = path.basename(file);\n    form[type] = {\n      value: fs.createReadStream(file),\n      options: { filename: opt.fileName }\n    };\n  } else {\n    // File as 'file_id'\n    form[type] = file;\n  }\n\n  return this.request(`/${ url }`, null, form);\n\n}\n\n/* Answer List */\n\nclass AnswerList {\n\n  constructor(id, opt={}) {\n    this.id = id;\n    this.cacheTime = Number(opt.cacheTime) || 300;\n    this.nextOffset = opt.nextOffset === undefined ? null : opt.nextOffset;\n    this.personal = opt.personal === undefined ? false : opt.personal;\n    this.list = [];\n  }\n\n  add(type, set={}) {\n    set.type = type;\n    this.list.push(set);\n    return set;\n  }\n\n  results() {\n    return JSON.stringify(this.list);\n  }\n\n}\n\n// Add answer methods\n{\n  for (let prop in ANSWER_METHODS) {\n    AnswerList.prototype[prop] = (name => {\n      return function(set) {\n        return this.add(name, set);\n      };\n    })(ANSWER_METHODS[prop]);\n  }\n}\n\n// Export methods\nmodule.exports = methods;\n","/home/travis/build/npmtest/node-npmtest-telebot/node_modules/telebot/modules/ask.js":"/*\n  Name: Ask\n  Description: Get direct answers from users!\n*/\n\n// Store user list\nconst userList = {};\n\nmodule.exports = bot => {\n\n  // On every text message\n  bot.on('*', (msg, info) => {\n\n    let id = msg.chat.id,\n      ask = userList[id];\n    \n    // If no question, then it's a regular message\n    if (!ask) return;\n\n    // Delete user from list and send custom event\n    delete userList[id];\n    bot.event('ask.' + ask, msg, info);\n  \n  });\n  \n  // Before call sendMessage method\n  bot.on('sendMessage', args => {\n\n    let id = args[0],\n      opt = args[2] || {};\n\n    let ask = opt.ask;\n\n    // If \"ask\" in options, add user to list\n    if (ask) userList[id] = ask;\n  \n  });\n\n};\n","/home/travis/build/npmtest/node-npmtest-telebot/node_modules/telebot/modules/botan.js":"/*\n  Name: Botan\n  Description: Advanced analytics for your Telegram bot: http://botan.io\n  NPM Requirements: botanio\n  Module options: {\n    botan: 00000 // Your AppMetrika key\n  }\n*/\n\n'use strict';\n\nmodule.exports = (bot, cfg) => {\n  \n  // Check AppMetrika key\n  const TOKEN = cfg.botan;\n\n  // On no token\n  if (!TOKEN) return console.error('[botan] no token key');\n  console.log('[botan] started');\n  \n  // Require botanio\n  const botan = require('botanio')(TOKEN);\n  \n  // Track every type of message\n  bot.on('*', (msg, props) => botan.track(msg, props.type));\n\n};\n","/home/travis/build/npmtest/node-npmtest-telebot/node_modules/telebot/modules/cmdbutton.js":"'use strict';\n\nmodule.exports = (bot, cfg) => {\n  \n  bot.on('callbackQuery', (msg, props) => {\n    const cmd = msg.data;\n    if (cmd.charAt(0) == '/') {\n      bot.answerCallback(msg.id);\n      return bot.event(cmd, msg, props);\n    }\n  });\n\n};\n","/home/travis/build/npmtest/node-npmtest-telebot/node_modules/telebot/modules/flooder.js":"/*\n\n  Name: Flooder\n  Description: Simple flood protection module.\n  Module options: {\n    flood: {\n      interval: 1, // In seconds\n      message: 'Flood message.' // Message\n    }\n  }\n\n  NOTE: Received Telegram message time accuracy is one second!\n\n*/\n\n// Store users\nconst userList = {};\n\n// Export bot module\nmodule.exports = (bot, cfg) => {\n\n  // Load config data\n  let opt = cfg.flood || {};\n  let interval = Number(opt.interval) || 1;\n  let text = opt.message === undefined ?\n    'Too many messages from you. Please, try later...' :\n      opt.message;\n\n  // Create message modifier\n  bot.mod('message', data => {\n\n    let msg = data.msg;\n    let id = msg.from.id;\n    let user = userList[id];\n    let now = new Date(msg.date);\n\n    if (user) {\n      let diff = now - user.lastTime;\n      user.lastTime = now;\n      if (diff <= interval) {\n        if (!user.flood) {\n          if (text) bot.sendMessage(id, text);\n          user.flood = true;\n        }\n        data.msg = {};\n      } else {\n        user.flood = false;\n      }\n    } else {\n      userList[id] = { lastTime: now };\n    }\n  \n    return data;\n  \n  });\n\n};\n","/home/travis/build/npmtest/node-npmtest-telebot/node_modules/telebot/modules/report.js":"/*\n  Name: Report\n  Description: Reports events (and their data) to user list.\n  Module options: {\n    report: {\n      events: [<event list>]\n      to: [<id list>]\n    }\n  },\n  Method options: {\n    skipReport: true // Skips report\n  }\n*/\n\n'use strict';\n\nmodule.exports = (bot, cfg) => {\n\n  // Read bot config data\n  const opt = cfg.report;\n  \n  // If no module options\n  if (typeof opt != 'object')\n    return console.error('[report] no config data');\n\n  // Get lists\n  let toList = Array.isArray(opt.to) ? opt.to : [];\n  let eventList = Array.isArray(opt.events) ? opt.events : [];\n  \n  // Check lists\n  if (!toList.length)\n    return console.error('[report] no user list');\n  if (!eventList.length)\n    return console.error('[report] no event list');\n\n  // Create events handler\n  bot.on(eventList, (event={}, props, info) => {\n\n    // Skip event with \"skipReport: true\" option key\n    if (\n      Object.prototype.toString.call(event) == '[object Arguments]' &&\n      (Array.prototype.slice.call(event).slice(-1)[0]).skipReport === true\n    ) return;\n    \n    const type = info.type;\n    const prefix = type.split('.')[0];\n    \n    // Stringify object data\n    const jsonData = s(JSON.stringify(event, (k, v) => {\n      return v.value instanceof Buffer ? '[Buffer]' : v;\n    }));\n\n\n    // Send to every user in list\n    for (let id of toList) {\n\n      if (prefix == 'error') {\n\n        // Error event\n        const { data, error } = event;\n\n        bot.sendMessage(id,\n          `👤 <b>User:</b> ${ data.from.id } (${ data.chat.id })\\n` +\n          `⚠ <b>Error:</b> ${ error.message || error }\\n` +\n          `${ error.stack ? `🚧 <b>Stack:</b>\\n${ s(error.stack) }\\n` : '' }` +\n          `⏰ <b>Event:</b> ${ type }\\n` +\n          `💾 <b>Data:</b> ${ jsonData }`,\n          { parse: 'html', skipReport: true }\n        );\n\n      } else {\n\n        // Another type of event\n        bot.sendMessage(id,\n          `⏰ <b>Event:</b> ${ type }\\n` +\n          (jsonData && jsonData != '{}' ? `💾 <b>Data:</b> ${ jsonData }` : ''),\n          { parse: 'html', skipReport: true }\n        );\n\n      }\n\n    }\n\n  });\n\n};\n\n// Safe string function\nfunction s(str) {\n  return String(str).replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;');\n}\n"}